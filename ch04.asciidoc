[[common_kubectl]]
== Common kubectl Commands

The +kubectl+ command-line utility is a powerful tool, and in the following chapters you will use it to create objects and interact with the Kubernetes API. Before that, however, it makes sense to go over the basic +kubectl+ commands that apply to all Kubernetes objects.

=== Namespaces
Kubernetes ((("kubectl tool", "commands", "namespaces")))uses _namespaces_ ((("namespaces")))to organize objects in the cluster. You
can think of each namespace as a folder that holds a set of objects.
By default, the +kubectl+ command-line tool interacts with the +default+
namespace. If you want to use a different namespace, you can pass
+kubectl+ ((("kubectl tool", "commands", "config set-context ")))the +--namespace+ flag. ((("kubectl tool", "commands", "get ")))For example, pass:[<span class="keep-together"><code>kubectl --namespace=mystuff</code></span>] references objects in the +mystuff+ namespace.

=== Contexts
If ((("contexts")))you ((("kubectl tool", "commands", id="kubectltool-commands")))want to change the default namespace more permanently, you can use a _context_. This gets recorded in a `kubectl` configuration file, usually located at `$HOME/.kube/config`.  This configuration file also stores how to both find and authenticate to your cluster. For example, you can create a context with a different default namespace for your +kubectl+ commands using:

++++
<pre data-type="programlisting">$ <strong>kubectl config set-context my-context --namespace=mystuff</strong></pre>
++++

This creates a new context, but it doesn't actually start using it
yet. To use this newly created context, you can run:

++++
<pre data-type="programlisting">$ <strong>kubectl config use-context my-context</strong></pre>
++++

Contexts can also be used to manage different clusters or different
users for authenticating to those clusters using the +--users+ or
+--clusters+ flags with the +set-context+ command.

=== Viewing Kubernetes API Objects
Everything ((("kubectl tool", "commands", "viewing API objects")))contained ((("API objects", "viewing, kubectl commands for")))in Kubernetes is represented by a RESTful resource. Throughout this book, we refer to these resources as _Kubernetes objects_. Each Kubernetes object exists at a unique HTTP path; for example, _https://your-k8s.com/api/v1/namespaces/default/pods/my-pod_ leads to the representation of a pod in the default namespace named +my-pod+. The +kubectl+ command makes HTTP requests to these URLs to access the Kubernetes objects that reside at these paths.

The most basic command for viewing Kubernetes objects ((("kubectl tool", "commands", "describe ")))via +kubectl+ is +get+. If you run __++kubectl get <resource-name>++__ you will get a listing of all resources in the current namespace. If you want to get a specific resource, you can use __++kubectl get <resource-name> <object-name>++__.

By default, +kubectl+ uses a human-readable printer for viewing the
responses from the API server, but this human-readable printer removes
many of the details of the objects to fit each object on one terminal line. One way to get slightly more information is to add the +-o wide+ flag, which gives more details, on a longer line.  If you want to view the complete object, you can also view the objects as raw JSON or YAML using the +-o json+ or +-o yaml+ flags, respectively.

A common option for manipulating the output of +kubectl+ is to
remove the headers, which is often useful when combining +kubectl+ with
Unix pipes (e.g., +kubectl ... | awk ...+). If you specify the +--no-headers+ flag, +kubectl+ will skip the headers at the top of the
human-readable table.

Another common task is extracting specific fields from the object. +kubectl+ uses the JSONPath query language to select fields in the returned object. The complete details of JSONPath are beyond the scope of this chapter, but as an example, this command will extract and print the IP address of the pod:

++++
<pre data-type="programlisting">$ <strong>kubectl get pods my-pod -o jsonpath --template={.status.podIP}</strong></pre>
++++


If you are interested in more detailed information about a particular
object, use the +describe+ command:

++++
<pre data-type="programlisting">$ <strong>kubectl describe &lt;<em>resource-name</em>&gt; &lt;<em>obj-name</em>&gt;</strong></pre>
++++

This will provide a rich multiline human-readable description of the object as well as any other relevant, related objects and events in the
Kubernetes cluster.

=== Creating, Updating, and Destroying Kubernetes Objects

Objects ((("kubectl tool", "commands", "creating, updating, and destroying objects")))in ((("objects", "creating")))the ((("objects", "updating")))Kubernetes ((("objects", "destroying")))API ((("updating", "objects")))are ((("destroying objects")))represented as JSON or YAML files.
These files are either returned by the server in response to a query
or posted to the server as part of an API request. You can use these
YAML or JSON files to create, update, or delete objects on the Kubernetes
server.

Let's assume that you have a simple object stored in _obj.yaml_. You
can use +kubectl+ to create this object in Kubernetes by ((("kubectl tool", "commands", "create ")))running:

++++
<pre data-type="programlisting">$ <strong>kubectl apply -f obj.yaml</strong></pre>
++++

Notice that you don't need to specify the resource type of the object;
it's obtained from the object file itself.

Similarly, after you make changes to the object, you can use ((("kubectl tool", "commands", "apply ")))the +apply+ command again to update the object:

++++
<pre data-type="programlisting">$ <strong>kubectl apply -f obj.yaml</strong></pre>
++++

[NOTE]
====
If you feel like making interactive edits, instead of editing a local
file, you can instead use 
((("kubectl tool", "commands", "edit ")))
the +edit+ command, which will download the latest object state, and then launch an editor that contains the definition:

++++
<pre data-type="programlisting">$ <strong>kubectl edit &lt;<em>resource-name</em>&gt; &lt;<em>obj-name</em>&gt;</strong></pre>
++++

After you save the file, it will be automatically uploaded back to the Kubernetes cluster.
====

When you want to delete an object, you can simply ((("kubectl tool", "commands", "delete ")))run:

++++
<pre data-type="programlisting">$ <strong>kubectl delete -f obj.yaml</strong></pre>
++++

But it is important to note that +kubectl+ will not prompt you to confirm the delete. Once you issue the command, the object _will_ be deleted.

Likewise, you can delete an object using the resource type and name:

++++
<pre data-type="programlisting">$ <strong>kubectl delete &lt;<em>resource-name</em>&gt; &lt;<em>obj-name</em>&gt;</strong></pre>
++++

=== Labeling and Annotating Objects

Labels ((("kubectl tool", "commands", "labeling and annotating objects", id="kubectltool-commands-labelingandannotatingobjects")))and ((("objects", "labeling and annotating", id="objects-labelingandannotating")))annotations ((("labels", id="labels1")))are ((("annotations", id="annotations1")))tags for your objects. We'll discuss the differences in <<labels_and_annotations>>, but for now, you can update the labels and annotations on any Kubernetes object using 
((("kubectl tool", "commands", "annotate", id="kubectl-commands-annotate")))
the +annotate+ ((("kubectl tool", "commands", "label")))and +label+ commands. For example, to add the +color=red+ label to a pod named +bar+, you can run:

++++
<pre data-type="programlisting">$ <strong>kubectl label pods bar color=red</strong></pre>
++++

The syntax for annotations is identical.

By ((("kubectl tool", "commands", "annotate", startref="kubectl-commands-annotate")))default, +label+ and +annotate+ will not let you overwrite an
existing label. To do this, you need to add the +--overwrite+ flag.

If you want to remove a label, you can use the __++-<label-name>++__ syntax:

++++
<pre data-type="programlisting">$ <strong>kubectl label pods bar -color</strong></pre>
++++

This will remove the +color+ label from ((("annotations", startref="annotations1")))the ((("labels", startref="labels1")))pod ((("objects", "labeling and annotating", startref="objects-labelingandannotating")))named ((("kubectl tool", "commands", "labeling and annotating objects", startref="kubectltool-commands-labelingandannotatingobjects")))+bar+.

=== Debugging Commands

+kubectl+ also ((("kubectl tool", "commands", "for debugging containers")))makes ((("debugging containers, kubectl commands for")))a number of commands available for debugging your
containers. You can use the following to see the logs for a running container:

++++
<pre data-type="programlisting">$ <strong>kubectl logs &lt;<em>pod-name</em>&gt;</strong></pre>
++++

If you have multiple containers in your pod you can choose the container to view using the +-c+ flag.

By default, +kubectl logs+ lists the current logs and exits. If you
instead want to continuously stream the logs back to the terminal without
exiting, you can add the +-f+ (follow) command-line flag.

You can also use ((("kubectl tool", "commands", "exec")))the +exec+ command to execute a command in a running container:

++++
<pre data-type="programlisting">$ <strong>kubectl exec -it &lt;<em>pod-name</em>&gt; -- bash</strong></pre>
++++

This will provide you with an interactive shell inside the running container so that you can perform more debugging.

Finally, you can copy files to and from a container using ((("kubectl tool", "commands", "cp")))the +cp+ command:

++++
<pre data-type="programlisting">$ <strong>kubectl cp &lt;<em>pod-name&gt;:/path/to/remote/file /path/to/local/file</em></strong></pre>
++++

This will copy a file from a running container to your local machine. You can also specify directories, or reverse the syntax to copy a file
from your local machine back out into the ((("kubectl tool", "commands", startref="kubectltool-commands")))container.

=== Summary
+kubectl+ is a powerful tool for managing your applications in your
Kubernetes cluster. This chapter has illustrated many of the common
uses for the tool, but +kubectl+ has a great deal of built-in help
available. You can start viewing this help with:

----
kubectl help
----

or:

++++
<pre data-type="programlisting">kubectl help <em>command-name</em></pre>
++++
